forestgain = null

function GFW() {
  var args = Array.prototype.slice.call(arguments),
  callback = args.pop(),
  modules = (args[0] && typeof args[0] === 'string') ? args : args[0],
  config,
  i;

  if (!(this instanceof GFW)) {
    return new GFW(modules, callback);
  }

  if (!modules || modules === '*') {
    modules = [];
    for (i in GFW.modules) {
      if (GFW.modules.hasOwnProperty(i)) {
        modules.push(i);
      }
    }
  }

  for (i = 0; i < modules.length; i += 1) {
    GFW.modules[modules[i]](this);
  }

  callback(this);

  return this;
}


GFW.modules = {};

GFW.modules.app = function(gfw) {
  gfw.app = {};

  gfw.app.Instance = Class.extend({
    init: function(map, options) {
      var that = this;

      this.options = _.defaults(options, {
        user       : 'gfw-01',
        layerTable : 'layerinfo_dev_copy'
      });

      this.timeLayerPosition = null;

      this._layers = [];
      this._cloudfront_url = 'dyynnn89u7nkm.cloudfront.net';
      this._global_version = 2;

      gfw.log.enabled = options ? options.logging: false;

      this.$map_coordinates = $('.map_coordinates');

      this.infowindow          = new CartoDBInfowindow(map);
      this.protectedInfowindow = new ProtectedInfowindow(map);

      this.queries = {};

      this.storiesMarkers = [];
      this.storiesLoaded = false;

      this.mongabayMarkers = [];
      this.mongabayLoaded = false;
      this.mongabayHidden = false;
      this.mc = {};

      // we can stop loading the blank (see limit=0 below) tileset here now that we are loading the animation. see todo on line 347
      this.queries.forma    = 'SELECT cartodb_id,alerts,z,the_geom_webmercator FROM gfw2_forma WHERE z=CASE WHEN 8 < {Z} THEN 17 ELSE {Z}+8 END limit 0';
      this.queries.modis    = 'SELECT cartodb_id,the_geom_webmercator FROM modis_forest_change_copy';
      this.queries.imazon   = 'SELECT cartodb_id,type,the_geom_webmercator FROM imazon_clean';
      this.queries.fires    = 'SELECT cartodb_id,the_geom_webmercator FROM global_7d';

      this.lastHash = null;

      this._cartodb   = Backbone.CartoDB({ user: this.options.user });
      this.datalayers = new gfw.datalayers.Engine(this._cartodb, options.layerTable);

      // Layers
      this.mainLayer        = null;
      this.specialLayer     = null;
      this.pantropicalLayer = null;
      this.forest2000Layer  = null;
      this.forestGainLayer  = null;

      this.currentBaseLayer = 'loss';

      this._setupZoom();

      google.maps.event.addDomListener(map, 'dragend', function(event) {
        Timeline.updateCoordinates(map.getCenter());
        TimelineLoss.updateCoordinates(map.getCenter());
        TimelineModis.updateCoordinates(map.getCenter());
        TimelineImazon.updateCoordinates(map.getCenter());
        that._updateCoordinates(map.getCenter());
      });

      google.maps.event.addListener(map, 'center_changed', function(event) {
        Timeline.updateCoordinates(map.getCenter());
        TimelineLoss.updateCoordinates(map.getCenter());
        TimelineModis.updateCoordinates(map.getCenter());
        TimelineImazon.updateCoordinates(map.getCenter());
        that._updateCoordinates(map.getCenter());
      });

      google.maps.event.addListener(map, 'zoom_changed', function(event) {
        Timeline.updateCoordinates(map.getCenter());
        TimelineLoss.updateCoordinates(map.getCenter());
        TimelineModis.updateCoordinates(map.getCenter());
        TimelineImazon.updateCoordinates(map.getCenter());
        that._updateCoordinates(map.getCenter());
      });
    },

    _updateCoordinates: function(latLng) {
      var lat = parseFloat(latLng.lat());
      var lng = parseFloat(latLng.lng());

      lat = lat.toFixed(6);
      lng = lng.toFixed(6);

      this.$map_coordinates.html('Lat/Long: '+lat + ',' + lng);
    },

    // Loads single layer
    _loadLayer: function(layer) {
      var id = layer.get('id');

      GFW.app._addLayer(layer);
      layer.attributes['visible'] = true;

      Filter.check(id);

      if (layer.get('slug') !== 'forest2000') {
        Legend.toggleItem(id, layer.get('category_slug'), layer.get('category_name'), layer.get('title'), layer.get('slug'), layer.get('category_color'), layer.get('title_color'));
      } else {
        Legend.toggleItemBySlug('forest2000');
      }
    },

    run: function() {
      this._setupListeners();

      gfw.log.info('App is now running!');
    },

    open: function() {
      var that = this;

      var
      dh = $(window).height() + 67,
      hh = $('header').height();

      $('#map').animate({ height: dh - hh }, 250, function() {
        google.maps.event.trigger(map, 'resize');
        map.setOptions({ scrollwheel: true });
      });

      this.goTo($('#map'), { margin: '67' });
    },

    close: function(callback) {
      var that = this;

      $('#map').animate({ height: 400 }, 250, function() {
        google.maps.event.trigger(map, 'resize');
        map.setOptions({ scrollwheel: false });

        callback && callback();
      });

      this.goTo($('body'));
    },

    goTo: function($el, opt, callback) {
      if ($el) {
        var speed  = (opt && opt.speed)  || 400;
        var delay  = (opt && opt.delay)  || 100;
        var margin = (opt && opt.margin) || 0;

        $('html, body').delay(delay).animate({scrollTop:$el.offset().top - margin}, speed);

        callback && callback();
      }
    },

    _setupZoom: function() {
      var overlayID = document.getElementById('zoom_controls');

      // zoomIn
      var zoomInControlDiv = document.createElement('DIV');
      overlayID.appendChild(zoomInControlDiv);

      var zoomInControl = new this._zoomIn(zoomInControlDiv, map);
      zoomInControlDiv.index = 1;

      // zoomOut
      var zoomOutControlDiv = document.createElement('DIV');
      overlayID.appendChild(zoomOutControlDiv);

      var zoomOutControl = new this._zoomOut(zoomOutControlDiv, map);
      zoomOutControlDiv.index = 2;
    },

    _zoomIn: function(controlDiv, map) {
      controlDiv.setAttribute('class', 'zoom_in');

      google.maps.event.addDomListener(controlDiv, 'mousedown', function() {
        var zoom = map.getZoom() + 1;

        if (zoom < 20) {
          map.setZoom(zoom);
        }
      });
    },

    _zoomOut: function(controlDiv, map) {
      controlDiv.setAttribute('class', 'zoom_out');

      google.maps.event.addDomListener(controlDiv, 'mousedown', function() {
        var zoom = map.getZoom() - 1;

        if (zoom > 2) {
          map.setZoom(zoom);
        }
      });
    },

    _setupListeners: function(){
      var that = this;

      google.maps.event.addListener(map, 'zoom_changed', function() {
        that._updateHash();
        that._refreshBaseLayer();
      });

      google.maps.event.addListener(map, 'dragend', function() {
        that._updateHash();
      });

      google.maps.event.addListener(map, 'click', function(event) {
        that.infowindow.close();
        that.protectedInfowindow.close();

        if (!that.specialLayer) { return; }

        var // get click coordinates
        lat = event.latLng.lat(),
        lng = event.latLng.lng(),
        params = {lat:lat, lon:lng},
        url = 'http://wip.gfw-apis.appspot.com/wdpa/sites';

        executeAjax(url, params, {
          success: function(sites) {
            var site = null;
            if (sites && sites.length > 0) {
              site = sites[0];
              that.protectedInfowindow.setContent(site);
              that.protectedInfowindow.setPosition(event.latLng);
              that.protectedInfowindow.open();
            }
          },
          error: function(e) {
            console.error('WDPA API call failed', e, url);
          }
        });
      });

      google.maps.event.addListener(map, 'tilesloaded', this._mapLoaded);
    },

    _removeLayer: function(layer) {
      if (!layer.get('external')) {
        this._layers = _.without(this._layers, layer.get('table_name'));
        this._renderLayers();
      } else {
        if (layer.get('slug') === 'forest2000') {
          this._removeForest2000Layer();
        } else if (layer.get('slug') === 'forestgain') {
          this._removeForestGainLayer();
        } else if (layer.get('slug') === 'pantropical') {
          this._removePantropicalLayer();
        } else {
          this._removeExternalLayer();
        }
      }

      this._refreshTimeLine();
    },

    _removeSubLayer: function(layer) {
      this._layers = _.without(this._layers, layer.get('sublayer'));
      this._renderLayers();
    },

    _addSubLayer: function(layer) {
      this._layers.push(layer.get('sublayer'));
      this._renderLayers();
    },

    _addLayer: function(layer) {
      if (layer.get('external')) {
        var table_name = layer.get('table_name');
        if (table_name == 'protected_areas') { this._renderExternalLayer(); }
        if (table_name == 'pantropical') { this._renderPantropicalLayer(); }
        if (table_name == 'forest2000') { this._renderForest2000Layer(); }
        if (table_name == 'forestgain') { this._renderForestGainLayer(); }
      } else {
        this._layers.push(layer.get('table_name'));
        this._renderLayers();
      }

      this._refreshTimeLine();
    },

    _refreshTimeLine: function() {
      var that = this;

      setTimeout(function() {
        Timeline.refresh();
      }, 300);

      this._toggleTimeLayer();
    },

    _removeExternalLayer: function() {
      if (this.specialLayer) {
        this.specialLayer.setOpacity(0);
        this.specialLayer = null;
      }
    },

    _removePantropicalLayer: function() {
      if (this.pantropicalLayer) {
        this.pantropicalLayer.setOpacity(0);
        this.pantropicalLayer = null;
      }
    },

    _removeForest2000Layer: function() {
      if (this.forest2000Layer) {
        this.forest2000Layer.setOpacity(0);
        this.forest2000Layer = null;
      }
    },

    _removeForestGainLayer: function() {
      if (this.forestGainLayer) {
        var layers = map.overlayMapTypes.getArray();

        for (var i = 0; i <= layers.length; i++) {
          if (layers[i] == this.forestGainLayer) {
            if (this.forestGainLayer) {
              this.forestGainLayer.setOpacity(0);
              this.forestGainLayer = null;
              map.overlayMapTypes.setAt(i, null);
            }
          }
        }
      }
    },

    _renderExternalLayer: function() {
      if (this.specialLayer) {
        this.specialLayer.setOpacity(1);
      } else {

        this.specialLayer = new google.maps.ImageMapType({
          getTileUrl: function(tile, zoom) {
            return 'http://184.73.201.235/blue/' + zoom + '/' + tile.x + '/' + tile.y;
          },
          tileSize: new google.maps.Size(256, 256),
          opacity:0.60,
          isPng: true
        });

        map.overlayMapTypes.push(this.specialLayer);
      }
    },

    _renderPantropicalLayer: function() {
      if (this.pantropicalLayer) {
        this.pantropicalLayer.setOpacity(1);
      } else {
        this.pantropicalLayer = new google.maps.ImageMapType({
          getTileUrl: function(tile, zoom) {
            return 'http://gfw-ee-tiles.appspot.com/gfw/masked_forest_carbon/' + zoom + '/' + tile.x + '/' + tile.y + '.png';
          },
          tileSize: new google.maps.Size(256, 256),
          opacity: 1,
          isPng: true
        });

        map.overlayMapTypes.insertAt(0, this.pantropicalLayer);
      }
    },

    _renderForest2000Layer: function() {
      if (this.forest2000Layer) {
        this.forest2000Layer.setOpacity(1);
      } else {
        this.forest2000Layer = new google.maps.ImageMapType({
          getTileUrl: function(tile, zoom) {
            return 'http://earthengine.google.org/static/hansen_2013/gfw_pink_tree/' + zoom + '/' + tile.x + '/' + tile.y + '.png';
          },
          tileSize: new google.maps.Size(256, 256),
          opacity:1,
          isPng: true
        });

        map.overlayMapTypes.insertAt(0, this.forest2000Layer);
      }
    },

    _renderForestGainLayer: function() {
      if (this.forestGainLayer) {
        this.forestGainLayer.setOpacity(1);
      } else {
        function CoordMapType() { }

        CoordMapType.prototype.tileSize = new google.maps.Size(256,256);
        CoordMapType.prototype.maxZoom = 19;
        CoordMapType.prototype.setOpacity = function(opacity) {
          $('.gain_alpha').css('opacity', opacity);
        };

        CoordMapType.prototype.getTile = function(coord, zoom, ownerDocument) {
          var x = coord.x;
          var y = coord.y;
          var z = zoom;

          var zsteps = zoom - 12;

          if (zoom > 12) {
            x = Math.floor(coord.x/(Math.pow(2, zoom - 12)));
            y = Math.floor(coord.y/(Math.pow(2, zoom - 12)));
            z = 12;
          }

          var url = 'http://earthengine.google.org/static/hansen_2013/gain_alpha/' + z + '/' + x + '/' + y + '.png';

          var image = new Image();
          image.src = url;
          image.className += 'gain_alpha';

          if (zsteps <= 0) return image;

          image.width = 256 * Math.pow(2, zsteps);
          image.height = 256 * Math.pow(2, zsteps);

          if (zsteps > 0) {
            var srcX = 256 * (coord.x % Math.pow(2, zsteps));
            var srcY = 256 * (coord.y % Math.pow(2, zsteps));

            image.style.position = 'absolute';
            image.style.top      = -srcY + 'px';
            image.style.left     = -srcX + 'px';
          }

          var div = ownerDocument.createElement('div');
          div.appendChild(image);
          div.style.width = this.tileSize.width + 'px';
          div.style.height = this.tileSize.height + 'px';
          div.style.position = 'relative';
          div.style.overflow = 'hidden';
          div.className += 'gain_alpha';

          return div;
        };

        CoordMapType.prototype.name = 'Tile #s';
        CoordMapType.prototype.alt = 'Tile Coordinate Map Type';

        this.forestGainLayer = new CoordMapType();
        map.overlayMapTypes.push(this.forestGainLayer);
      }
    },

    _renderLayers: function() {
      if (this._layers.length > 0) {
        var template = "SELECT cartodb_id||':' ||'{{ table_name }}' as cartodb_id, the_geom_webmercator, '{{ table_name }}' AS name FROM {{ table_name }}";

        var queryArray = _.map(this._layers, function(layer) {
          return _.template(template, { table_name: layer });
        });

        queryArray.push("(SELECT cartodb_id||':' ||'caf_lc_1' as cartodb_id, the_geom_webmercator, 'caf_lc_1' AS name FROM caf_lc_1 LIMIT 0)") //a hack for the stupid layer show hide discoloration thing I found
        var query = queryArray.join(' UNION ALL ');

        this.mainLayer && this.mainLayer.setMap(null);

        this.mainLayer = new CartoDBLayer({
          map: map,
          user_name:'',
          tiler_domain:this._cloudfront_url,
          sql_domain:this._cloudfront_url,
          extra_params:{ v: this._global_version, cache_policy: 'persist' }, //define a verison number on requests
          tiler_path:'/tiles/',
          tiler_suffix:'.png',
          tiler_grid: '.grid.json',
          table_name: 'gfw2_layerstyles_v4',
          query: query,
          layer_order: 'bottom',
          opacity: 1,
          interactivity:'cartodb_id',
          featureClick: this._onMainLayerClick,
          featureOver: function(ev, latlng, pos, data) { map.setOptions({draggableCursor: 'pointer'}); },
          featureOut: function() { map.setOptions({draggableCursor: 'default'}); },
          debug:false,
          auto_bound: false
        });

        this.mainLayer.setInteraction(true);
      } else {
        if (this.mainLayer) {
          this.mainLayer.setOpacity(0);
          this.mainLayer.setInteraction(false);
        }
      }
    },

    _onMainLayerClick: function(ev, latlng, pos, data) {
      var that = this;

      //we needed the cartodb_id and table name
      var pair = data.cartodb_id.split(':');

      if (pair[1] === 'world_ifl') return;

      //here i make a crude request for the columns of the table
      //nulling out the geoms to save payload
      var request_sql = 'SELECT *, null as the_geom, null as the_geom_webmercator FROM ' + pair[1] + ' WHERE cartodb_id = ' + pair[0];
      var url = 'http://dyynnn89u7nkm.cloudfront.net/api/v2/sql?q=' + encodeURIComponent(request_sql);

      var makeSuccessCallback = function(pairs) {
        return function(json) {
          if (!json || (json && !json.rows)) return;

          delete json.rows[0]['cartodb_id'],
          delete json.rows[0]['the_geom'];
          delete json.rows[0]['the_geom_webmercator'];
          delete json.rows[0]['created_at'];
          delete json.rows[0]['updated_at'];

          var data = _.clone(json.rows[0]);
          var content_data = json.rows[0];

          if ($.isEmptyObject(data)) return;

          for (var key in content_data) {
            var temp;

            if (content_data.hasOwnProperty(key)) {
              temp = content_data[key];
              delete content_data[key];
              key = key.replace(/_/g,' '); //add spaces to key names
              content_data[key.charAt(0).toUpperCase() + key.substring(1)] = temp; //uppercase
            }
          }

          if (data) {
            if ( pair[1] == 'biodiversity_hotspots' ) {
              GFW.app.infowindow.setMode('image')
              GFW.app.infowindow.setVisibleColumns(['description', 'photo_credit']);
              GFW.app.infowindow.setContent(data);
            } else {
              GFW.app.infowindow.setMode('normal')
              GFW.app.infowindow.setVisibleColumns();
              GFW.app.infowindow.setContent(content_data);
            }

            GFW.app.infowindow.setPosition(latlng);
            GFW.app.infowindow.open();
          }
        }
      }

      var onSuccess = makeSuccessCallback(pair);

      $.ajax({
        async: false,
        dataType: 'jsonp',
        crossDomain: true,
        jsonpCallback:'iwcallback',
        url: url,
        success: onSuccess,
        error: function(xhr, status, c) {
          console.log('Error', xhr, status, c);
        }
      });
    },

    _refreshBaseLayer: function() {
      if (GFW.app.baseLayer && GFW.app.currentBaseLayer != 'forma') {
        try {
          var query = GFW.app.queries[GFW.app.currentBaseLayer].replace(/{Z}/g, map.getZoom());
          GFW.app.baseLayer.setQuery(query);
        }

        catch(err) { }
      }
    },

    _getTableName: function(layerName) {
      if (layerName === 'forma') {
        return 'gfw2_forma';
      } else if (layerName === 'modis') {
        return 'modis_forest_change_copy';
      } else if (layerName === 'imazon') {
        return 'imazon_clean';
      } else if (layerName === 'loss') {
        return 'gfw_loss_year';
      } else if (layerName === 'fires') {
        return 'global_7d';
      }

      return null;
    },

    _updateBaseLayer: function() {
      this._toggleTimeLayer();

      GFW.app.baseLayer && GFW.app.baseLayer.setMap(null);

      this._loadBaseLayer();
    },

    _toggleStoriesLayer: function(id) {
      _.each(this.storiesMarkers, function(marker) {
        marker.toggle();
      });

      Filter.toggle(id);
    },

    _hideStoriesMarkers: function() {
      _.each(this.storiesMarkers, function(marker) {
        marker.hide();
      });
    },

    _showStoriesMarkers: function() {
      _.each(this.storiesMarkers, function(marker) {
        marker.show();
      });
    },

    _loadStoriesLayer: function() {
      var that = this;

      $.ajax({
        async: false,
        url: '/stories.json?for_map=true',
        success: function(data) {
          _.each(data, function(story) {
            var
            lat        = story.lat,
            lng        = story.lng,
            position   = new google.maps.LatLng(lat, lng),
            thumb      = story.media[0].preview_url,
            icon       = '<%= image_path "icons/marker_exclamation.png" %>',
            properties = null;

            var title = story.title;

            if (title.length > 34) {
              title = $.trim(title).substring(0, 34).split(' ').slice(0, -1).join(' ') + '...';
            }

            var content = "<strong><a href='/stories/"+story.id+"'>"+title+"</a></strong> <span>by "+story.name+" &middot; </span><a href='/stories/"+story.id+"'>read more</a>";

            marker = new GFWMarker({ position: position, icon: icon, thumbnail_url: thumb, content: content });
            marker.setMap(map);
            that.storiesMarkers.push(marker);
          });

          that.storiesLoaded = true;
        }
      });
    },

    _loadMongabayLayer: function() {
      var that = this;

      $.ajax({
        async: false,
        url: "https://wri-01.cartodb.com/api/v1/sql?q=SELECT * FROM mongabaydb WHERE published >= now() - INTERVAL '3 Months'&format=geojson",
        success: function(data) {
          _.each(data.features, function(features) {
            var position = new google.maps.LatLng(features.properties.lat, features.properties.lon),
                thumb    = features.properties.thumbnail,
                icon     = '<%= image_path "icons/mongabay_exclamation.png" %>',
                properties = null,
                published = new Date(features.properties.published).toLocaleDateString();

            var title = features.properties.title;

            if (title.length > 34) {
              title = $.trim(title).substring(0, 34).split(' ').slice(0, -1).join(' ') + '...';
            }

            var content = "<strong><a href='"+features.properties.loc+"' target='_blank'>"+title+"</a></strong> <span>by "+features.properties.author+"</span> <span>on "+published+"</span><br><a href='"+features.properties.loc+"target='_blank'>read more</a>";

            marker = new GFWMarker({ position: position, icon: icon, thumbnail_url: thumb, content: content, map: map, type: 'mongabay' });
            that.mongabayMarkers.push(marker);
          });

          var clusterStyles = [
            {
              textColor: '#ffffff',
              url: '/assets/icons/marker_cluster.png',
              width: 36,
              height: 36
            }, {
              textColor: '#ffffff',
              url: '/assets/icons/marker_cluster.png',
              width: 36,
              height: 36
            }, {
              textColor: '#ffffff',
              url: '/assets/icons/marker_cluster.png',
              width: 36,
              height: 36
            }
          ];

          var mcOptions = {
            gridSize: 50,
            styles: clusterStyles,
            maxZoom: 15
          };

          that.mc = new MarkerClusterer(map, that.mongabayMarkers, mcOptions);

          that.mongabayLoaded = true;
        }
      });
    },

    _toggleMongabayLayer: function(id) {
      if (this.mongabayLoaded) {
        this.mc.clearMarkers();
        this.mongabayMarkers = [];
        this.mongabayLoaded = false;
      } else {
        this._loadMongabayLayer();
      }

      Filter.toggle(id);
    },

    _hideMongabayLayer: function() {
      if (this.mongabayLoaded) {
        this.mc.clearMarkers();
        this.mongabayMarkers = [];
        this.mongabayLoaded = false;
      }
    },

    _toggleTimeLayer: function() {
      if (this.time_layer_loss && GFW.app.currentBaseLayer !== 'loss') {
        this.time_layer_loss.hide();
        this.time_layer_loss = null;
        TimelineLoss.hide();
      }

      if (this.time_layer && GFW.app.currentBaseLayer !== 'forma') {
        this.time_layer.hide();
        Timeline.hide();
      } else {
        Timeline.loadDefaultRange();
      }

      if (this.time_layer_modis && GFW.app.currentBaseLayer !== 'modis') {
        this.time_layer_modis.hide();
        TimelineModis.hide();
      }

      if (this.time_layer_imazon &&GFW.app.currentBaseLayer !== 'imazon') {
        this.time_layer_imazon.hide();
        TimelineImazon.hide();
      }
    },

    _loadTimeLayerLoss: function() {
      var that = this;

      this.time_layer_loss = Deforestation.init(map);
      this.time_layer_loss.set_start_time(2010);

      TimelineLoss.show();

      TimelineLoss.bind('change_date', function(start_year, end_year) {
        that.time_layer_loss.set_range(start_year, end_year);
      });

      TimelineLoss.loadDefaultRange();
    },

    _loadTimeLayer: function() {
      var that = this;

      // commented in gmaps library
      setTimeout(function(){
        if (!document.getElementById('cartodb_logo')) {
          var cartodb_link = document.createElement('a');
          cartodb_link.setAttribute('id','cartodb_logo');
          cartodb_link.setAttribute('style','position:absolute; bottom:3px; left:74px; display:block; border:none; z-index:100');
          cartodb_link.setAttribute('href','http://www.cartodb.com');
          cartodb_link.setAttribute('target','_blank');
          cartodb_link.innerHTML = "<img src='http://cartodb.s3.amazonaws.com/static/new_logo.png' alt='CartoDB' title='CartoDB' style='border:none;' />";
          map.getDiv().appendChild(cartodb_link)
        }
      }, 2000);

      this.time_layer = new TimePlayer('gfw2_forma', this._global_version, this._cloudfront_url);
      this.time_layer.options.table_name = null;
      map.overlayMapTypes.push(this.time_layer);

      Timeline.show();

      Timeline.bind('change_date', function(start_month, end_month, year) {
        that.time_layer.set_start_time(start_month);
        that.time_layer.set_time(end_month, year);
      });

      Timeline.loadDefaultRange();
    },

    _loadTimeLayerModis: function() {
      var that = this;

      this.time_layer_modis = new StaticGridLayer({
        map: map,
        _table: 'modis_forest_change_copy',
        _global_version: that._global_version,
        _cloudfront_url: that._cloudfront_url
      });

      TimelineModis.show();

      TimelineModis.bind('change_date', function(month, year) {
        self.time_layer_modis.set_time(month, year);
      });
    },

    _loadTimeLayerImazon: function() {
      var that = this;

      this.time_layer_imazon = new StaticGridLayerImazon({
        map: map,
        _table: 'imazon_clean',
        _global_version: that._global_version,
        _cloudfront_url: that._cloudfront_url
      });

      TimelineImazon.show();

      TimelineImazon.bind('change_date', function(start_month, end_month, start_year, end_year) {
        self.time_layer_imazon.set_time(start_month, end_month, start_year, end_year);
      });
    },

    _loadBaseLayer: function() {
      var self = this;
      var table_name = null;

      if (this.currentBaseLayer === 'forma') {
        if (config.mapLoaded && !this.time_layer) {
          this._loadTimeLayer();
        } else {
          if (this.time_layer) {
            this.time_layer.show();
            Timeline.show();
          }
        }

        this.$map_coordinates.hide();

        return;

      } else if (this.currentBaseLayer === 'loss') {
        if (config.mapLoaded && !this.time_layer_loss) {
          this._loadTimeLayerLoss();
        } else {
          if (this.time_layer_loss) {
            this.time_layer_loss.show();
            TimelineLoss.show();
          }
        }

        this.$map_coordinates.hide();

        return;

      } else if (this.currentBaseLayer === 'modis') {
        if (config.mapLoaded && !this.time_layer_modis) {
          this._loadTimeLayerModis();
        } else {
          if (this.time_layer_modis) {
            this.time_layer_modis.show();
            TimelineModis.show();
          }
        }

        this.$map_coordinates.hide();

        return;

      } else if (this.currentBaseLayer === 'imazon') {
        if (config.mapLoaded && !this.time_layer_imazon) {

          this._loadTimeLayerImazon();
        } else {
          if (this.time_layer_imazon) {
            this.time_layer_imazon.show();
            TimelineImazon.show();
          }
        }

        this.$map_coordinates.hide();

        return;

      } else if (this.currentBaseLayer === 'forestgain') {
        return;
      }

      if (this.currentBaseLayer) {
        this.baseLayer = new CartoDBLayer({
          map: map,
          user_name:'',
          tiler_domain:'dyynnn89u7nkm.cloudfront.net',
          sql_domain:'dyynnn89u7nkm.cloudfront.net',
          tiler_path:'/tiles/',
          extra_params:{ v: this._global_version, cache_policy: 'persist' }, //define a verison number on requests
          tiler_suffix:'.png',
          table_name: this._getTableName(this.currentBaseLayer),
          query: this.queries[this.currentBaseLayer].replace(/{Z}/g, map.getZoom()),
          layer_order: 'top',
          auto_bound: false
        });
      }
    },

    _mapLoaded: function(){
      GFW.app._toggleTimeLayer();

      if (!config.mapLoaded) {
        config.mapLoaded = true;
        GFW.app._loadBaseLayer();

        if (showMap) Filter.show();
      }
    },

    _updateHash: function() {
      var hash,
          zoom = map.getZoom(),
          lat = map.getCenter().lat().toFixed(2),
          lng = map.getCenter().lng().toFixed(2);

      var layers = config.MAPOPTIONS.layers;

      if (layers) {
        hash = 'map/' + zoom + '/' + lat + '/' + lng + '/' + config.ISO + '/' + layers;
        window.router.navigate(hash, { trigger: true, replace: true });
      } else {
        hash = 'map/' + zoom + '/' + lat + '/' + lng + '/' + config.ISO;
        window.router.navigate(hash, { trigger: true } );
      }
    }
  });
};

GFW.modules.maplayer = function(gfw) {
  gfw.maplayer = {};
  gfw.maplayer.Engine = Class.extend(
    {
      init: function(layer) {
        this.layer = layer;

        this.$map_coordinates = $('.map_coordinates');

        var sw = new google.maps.LatLng(this.layer.get('ymin'), this.layer.get('xmin'));
        var ne = new google.maps.LatLng(this.layer.get('ymax'),this.layer.get('xmax'));
        this._bounds = new google.maps.LatLngBounds(sw, ne);

        if (config.MAPOPTIONS.layers) {
          var filters = _.map(config.MAPOPTIONS.layers.split(','), function(i) { return parseInt(i, 10); });
        }

        this._addControl(filters);
      },

      _addControl: function(filters) {
        var that = this;

        // special layers
        forma               = GFW.app.datalayers.LayersObj.get(569),
        modis               = GFW.app.datalayers.LayersObj.get(588),
        imazon              = GFW.app.datalayers.LayersObj.get(584);
        fires               = GFW.app.datalayers.LayersObj.get(593);
        forestgain          = GFW.app.datalayers.LayersObj.get(596);
        forest2000          = GFW.app.datalayers.LayersObj.get(591);
        umd_tree_loss_gain  = GFW.app.datalayers.LayersObj.get(597);

        forestgain.set('visible', true);
        GFW.app._addLayer(forestgain);

        umd_tree_loss_gain.set('visible', true);

        var slug = this.layer.get('slug');

        if (slug !== ('loss' || 'forestgain')) {
          this.layer.attributes['visible'] = false;
        }

        var clickEvent = function() {
          that._toggleLayer();
        };

        if (slug == 'nothing') {
          var event = function() {
            GFW.app.currentBaseLayer = null;
            that._hideBaseLayers(GFW.app);
            that._removeExtendedLayers();

            if (forestgain) GFW.app._removeLayer(forestgain);
          };

          Filter.addFilter('', slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: null, category_color: this.layer.get('category_color'), color: this.layer.get('title_color') });
        } else if (slug == 'user_stories') {
          var customEvent = function() {
            GFW.app._toggleStoriesLayer(that.layer.get('id'));
            Legend.toggleItem(that.layer.get('id'), that.layer.get('category_slug'), that.layer.get('category_name'),  that.layer.get('title'), that.layer.get('slug'), that.layer.get('category_color'), that.layer.get('title_color'));

            if (!GFW.app.storiesLoaded) {
              GFW.app._loadStoriesLayer();
            }
          };

          Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: customEvent, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

          if (_.include(filters, this.layer.get('id'))) {
            GFW.app._loadStoriesLayer();
            Filter.check(this.layer.get('id'));
            Legend.toggleItem(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'));
          }
        } else if (slug === 'mongabay') {
          var mongabayEvent = function() {
            GFW.app._toggleMongabayLayer(that.layer.get('id'));
            Legend.toggleItem(that.layer.get('id'), that.layer.get('category_slug'), that.layer.get('category_name'),  that.layer.get('title'), that.layer.get('slug'), that.layer.get('category_color'), that.layer.get('title_color'));
          };

          Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: mongabayEvent, source: this.layer.get('title'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color') });

          if (_.include(filters, this.layer.get('id'))) {
            GFW.app._loadMongabayLayer();
            Filter.check(this.layer.get('id'));
            Legend.toggleItem(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'));
          }
        } else if (slug === 'imazon' || slug === 'modis' || slug === 'fires') {
          var event = function() {
            that._toggleLayer();
          };

          Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: slug, category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });
        } else if (slug === 'umd_tree_loss_gain') {
          var event = function() {
            that._toggleLayer();
          };

          var subEvent = function() {
            that._toggleSubLayer();
          };

          Filter.addForestLossFilters(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

          Legend.toggleItem(this.layer.get('id'), this.layer.get('category_slug'), this.layer.get('category_name'),  this.layer.get('title'), slug, this.layer.get('category_color'), this.layer.get('title_color'), subEvent);
        } else if (slug === 'loss' || slug === 'forestgain') {
          var event = function() {
            that._toggleLayer();
          };

          Filter.addForestLossFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: event, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

          // Adds the layers from the hash
          if (filters && _.include(filters, this.layer.get('id'))) {
            if (GFW.app) {
              GFW.app._loadLayer(this.layer);
            } else {
              config.pendingLayers.push(this.layer);
            }
          }
        } else {
          Filter.addFilter(this.layer.get('id'), slug, this.layer.get('category_name'), this.layer.get('title'), { clickEvent: clickEvent, source: this.layer.get('source'), category_color: this.layer.get('category_color'), color: this.layer.get('title_color'), subtitle: this.layer.get('subtitle') });

          // Adds the layers from the hash
          if (filters && _.include(filters, this.layer.get('id'))) {
            if (GFW.app) {
              GFW.app._loadLayer(this.layer);
            } else {
              config.pendingLayers.push(this.layer);
            }
          } else if (this.layer.get('table_name') == 'gfw2_forma') {
            this.layer.attributes['sublayer_visible'] = false;
          }
        }
      },

      _bindDisplay: function(display) {
        display.setEngine(this);
      },

      _hideBaseLayers: function(){
        this.$map_coordinates.show();
        this._updateCoordinates(map.getCenter());

        GFW.app.currentBaseLayer = null;
        GFW.app._toggleTimeLayer();
        Legend.removeCategory('forest_clearing');

        if (GFW.app.baseLayer) GFW.app.baseLayer.setOptions({ opacity: 0 });
      },

      _updateCoordinates: function(latLng) {
        var lat = parseFloat(latLng.lat());
        var lng = parseFloat(latLng.lng());

        lat = lat.toFixed(6);
        lng = lng.toFixed(6);

        if (this.$map_coordinates) {
          this.$map_coordinates.html('Lat/Long: '+lat + ',' + lng);
        }
      },

      _removeExtendedLayers: function() {
        var renderLayers = false;

        // Remove UMD extended layers
        GFW.app._removeForest2000Layer();
        forest2000.set('visible', false);

        $comp_layer = $('#layer a[data-id="591"]');
        $comp_layer.removeClass('checked');
        $comp_layer.css('color', '#ccc');
        $comp_layer.find('i').css('background-color', '#ccc');

        Filter.remove(591);
        Legend.remove(591);

        var extendedLayers = ['quicc_bounding_box_extent', 'imazon_sad_geografic_extent', 'ecoregions_biome'];

        // Remove extended layers
        _.each(extendedLayers, function(name) {
          if (_.include(GFW.app._layers, name)) {
            GFW.app._layers = _.without(GFW.app._layers, name);
            renderLayers = true;
          }
        });

        if (renderLayers) {
          GFW.app._renderLayers();
        }
      },

      _toggleSubLayer: function() {
        if (this.layer.get('sublayer') == 'forest_cover_2000') {
          forest2000.attributes['visible'] = !forest2000.attributes['visible'];

          var visible = forest2000.get('visible');

          if (visible) {
            GFW.app._renderForest2000Layer();
          } else {
            GFW.app._removeForest2000Layer();
          }

          Legend.toggleItemBySlug('forest2000');
        } else {
          this.layer.attributes['sublayer_visible'] = !this.layer.attributes['sublayer_visible'];

          var visible = this.layer.get('sublayer_visible');

          if (visible) {
            GFW.app._addSubLayer(this.layer);
          } else {
            GFW.app._removeSubLayer(this.layer);
          }
        }
      },

      _toggleLayer: function() {
        var self = this;

        if (this.layer.attributes['disabled']) {
          return false;
        }

        this.layer.attributes['visible'] = !this.layer.attributes['visible'];

        var
        slug            = this.layer.get('slug'),
        title           = this.layer.get('title'),
        title_color     = this.layer.get('title_color'),
        visible         = this.layer.get('visible'),
        tableName       = this.layer.get('table_name'),
        category        = this.layer.get('category_name'),
        category_slug   = this.layer.get('category_slug'),
        category_color  = this.layer.get('category_color'),
        id              = this.layer.get('id');

        if (category === null || !category) { // Default data
          category       = 'Conservation';
          category_slug  = 'conservation';
          category_color = '#707D92';
        }

        if (category != 'Forest change' && slug != 'forest2000') {
          Legend.toggleItem(id, category_slug, category, title, slug, category_color, title_color);
        }

        if (slug === 'forestgain') {
          if (visible) {
            GFW.app._addLayer(this.layer);
          } else {
            GFW.app._removeLayer(this.layer);
          }

          Legend.toggleItemBySlug(slug);
        } else if (slug === 'loss') {
          if (GFW.app.currentBaseLayer == null) {
            GFW.app.currentBaseLayer = slug;
            GFW.app._updateBaseLayer();
          } else {
            GFW.app.currentBaseLayer = null;
            GFW.app._updateBaseLayer();
          }

          Legend.toggleItemBySlug(slug);
        } else if (slug === 'forma' || slug === 'modis' || slug === 'imazon' || slug === 'fires') {
          if (forestgain) {
            GFW.app._removeLayer(forestgain);
            forestgain.set('visible', false);
          }

          umd_tree_loss_gain.set('visible', false);

          this.layer.attributes['sublayer_visible'] = false;
          this._removeExtendedLayers();

          if (slug === 'forma' && showMap) {
            Timeline.show();
            Analysis.info.model.set('dataset', 'forma');
          } else {
            Timeline.hide();
          }

          if (slug === 'loss' && showMap) {
            TimelineLoss.show();
            Analysis.info.model.set('dataset', 'umd');
          } else {
            TimelineLoss.hide();
          }

          if (slug === 'modis' && showMap) {
            TimelineModis.show();
            Analysis.info.model.set('dataset', 'modis');
          } else {
            TimelineModis.hide();
          }

          if (slug === 'imazon' && showMap) {
            TimelineImazon.show();
            Analysis.info.model.set('dataset', 'imazon');
          } else {
            TimelineImazon.hide();
          }

          GFW.app.currentBaseLayer = slug;
          GFW.app._updateBaseLayer();

          if (slug === 'forma') {
            forma.attributes['visible'] = true;
          } else if (slug ==='modis') {
            modis.attributes['visible'] = true;
          } else if (slug === 'imazon') {
            imazon.attributes['visible'] = true;
          }

          var subEvent;

          if (this.layer.get('sublayer')) {
            subEvent = function() {
              self._toggleSubLayer();
            };
          }

          Legend.replace(id, category_slug, category, title, slug, category_color, title_color, subEvent);

        } else if (slug === 'umd_tree_loss_gain') {
          GFW.app.currentBaseLayer = null;
          this._hideBaseLayers(GFW.app);

          GFW.app.currentBaseLayer = 'loss';
          GFW.app._addLayer(forestgain);
          forestgain.set('visible', true);
          GFW.app._updateBaseLayer();

          umd_tree_loss_gain.set('visible', true);

          this.layer.attributes['sublayer_visible'] = false;
          this._removeExtendedLayers();

          Analysis.info.model.set('dataset', 'umd');

          var subEvent;

          if (this.layer.get('sublayer')) {
            subEvent = function() {
              self._toggleSubLayer();

              Legend.resize();
            };
          }

          Legend.replace(id, category_slug, category, title, slug, category_color, title_color, subEvent);
        } else if (slug === 'forest2000') {
          if (forest2000.get('visible')) {
            GFW.app._renderForest2000Layer();
          } else {
            GFW.app._removeForest2000Layer();
          }

          if (umd_tree_loss_gain.get('visible')) {
            Legend.toggleItemBySlug(slug);
          } else {
            Legend.toggleItemBySlug(slug, forest2000);
          }

          Filter.toggle(id);
        } else {
          if (visible) {
            GFW.app._addLayer(this.layer);
          } else {
            GFW.app._removeLayer(this.layer);
          }

          Filter.toggle(id);
        }
      }
  });
};

GFW.modules.datalayers = function(gfw) {
  gfw.datalayers = {};

  gfw.datalayers.Engine = Class.extend({
    init: function(CartoDB, layerTable) {
      this._bycartodbid = {};
      this._bytitle     = {};
      this._dataarray   = [];
      this._cartodb     = CartoDB;

      var LayersColl    = this._cartodb.CartoDBCollection.extend({
        sql: function(){
          return 'SELECT cartodb_id AS id, slug, title, title_color, subtitle, sublayer, table_name, source, category_color, category_slug, category_name, external, zmin, zmax, ST_XMAX(the_geom) AS xmax, \
            ST_XMIN(the_geom) AS xmin, ST_YMAX(the_geom) AS ymax, ST_YMIN(the_geom) AS ymin, tileurl, true AS visible \
            FROM ' + layerTable + ' \
            WHERE display = TRUE ORDER BY displaylayer,title ASC';
        }
      });

      this.LayersObj = new LayersColl();
      this.LayersObj.fetch();
      this._loadLayers();
    },

    _loadLayers: function(){
      var that = this;

      this.LayersObj.bind('reset', function() {
        that.LayersObj.each(function(p) {
          if (p.get('slug') === 'user_stories') {
            Filter.addFilter(0, 'nothing', 'People', 'Stay tuned', { disabled: true , category_color: '#707D92', color: '#707D92' });
          }

          that._addLayer(p);
        });
      });
    },

    _addLayer: function(p){
      var layer = new gfw.maplayer.Engine(p, map);
    }
  });
};

/**
* Logging module that gfwtes log messages to the console and to the Speed
* Tracer API. It contains convenience methods for info(), warn(), error(),
* and todo().
*
*/
GFW.modules.log = function(gfw) {
  gfw.log = {};

  gfw.log.info = function(msg) {
    gfw.log._gfwte('INFO: ' + msg);
  };

  gfw.log.warn = function(msg) {
    gfw.log._gfwte('WARN: ' + msg);
  };

  gfw.log.error = function(msg) {
    gfw.log._gfwte('ERROR: ' + msg);
  };

  gfw.log.todo = function(msg) {
    gfw.log._gfwte('TODO: '+ msg);
  };

  gfw.log._gfwte = function(msg) {
    var logger = window.console;
    if (gfw.log.enabled) {
      if (logger && logger.markTimeline) {
        logger.markTimeline(msg);
      }
    }
  };
};
