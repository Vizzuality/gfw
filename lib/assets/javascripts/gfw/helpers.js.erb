var config = {
  ZOOM: 3,
  MINZOOM: 3,
  MAXZOOM: 17,
  LAT: 15,
  LNG: 27,
  ISO: 'ALL',
  BASEMAP: 'grayscale',
  BASELAYER: 'loss',
  MONTHNAMES: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  MONTHNAMES_SHORT: ["JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC"],
  QUARTERNAMES: ["JAN - MAR", "APR - JUN", "JUL - SEP", "OCT - DEC"],
  mapLoaded: false,
  canopy_choice: false,
  compression: 0.3
};

config.MAPOPTIONS = {
  zoom: config.ZOOM,
  minZoom: config.MINZOOM,
  maxZoom: config.MAXZOOM,
  center: new google.maps.LatLng(config.LAT, config.LNG),
  mapTypeId: google.maps.MapTypeId.HYBRID,
  backgroundColor: '#99b3cc',
  disableDefaultUI: true,
  panControl: false,
  zoomControl: false,
  mapTypeControl: false,
  scaleControl: true,
  scaleControlOptions: {
      position: google.maps.ControlPosition.TOP_LEFT,
  },
  streetViewControl: false,
  overviewMapControl: false,
  scrollwheel: false,
  layers: [596],
  analysis: ''
};

config.OVERLAYSTYLES = {
  strokeWeight: 2,
  fillOpacity: 0.25,
  fillOpacity: 0.45,
  fillColor: "#FFF",
  strokeColor: "#A2BC28",
  editable: true,
  icon: new google.maps.MarkerImage(
    '<%= image_path "icons/marker_exclamation.png" %>',
    new google.maps.Size(36, 36), // size
    new google.maps.Point(0, 0), // offset
    new google.maps.Point(18, 18) // anchor
  )
};

config.MAPSTYLES = {};

config.MAPSTYLES.grayscale = {
  type: 'style',
  style: [ { "featureType": "water" }, { "featureType": "transit", "stylers": [ { "saturation": -100 } ] }, { "featureType": "road", "stylers": [ { "saturation": -100 } ] }, { "featureType": "poi", "stylers": [ { "saturation": -100 } ] }, { "featureType": "landscape", "stylers": [ { "saturation": -100 },{ "lightness": 90 } ] }, { "featureType": "administrative", "stylers": [ { "saturation": -100 } ] },{ "featureType": "poi", "elementType": "geometry", "stylers": [ { "visibility": 'off' } ] } ]
}

config.MAPSTYLES.terrain = {
  type: 'mapType',
  style: google.maps.MapTypeId.TERRAIN,
  title: "Terrain"
}

config.MAPSTYLES.satellite = {
  type: 'mapType',
  style: google.maps.MapTypeId.SATELLITE,
  title: "Satellite"
}

config.MAPSTYLES.roads = {
  type: 'mapType',
  style: google.maps.MapTypeId.HYBRID,
  title: "Roads"
}

config.MAPSTYLES.treeheight = {
  type: 'customMapType',
  style: new google.maps.ImageMapType({
    getTileUrl: function(ll, z) {
      var X = Math.abs(ll.x % (1 << z)); // wrap
      return "//<%= ENV['GFW_API_HOST'] %>/gee/simple_green_coverage/" + z + "/" + X + "/" + ll.y + ".png";
    },
    tileSize: new google.maps.Size(256, 256),
    isPng: true,
    maxZoom: 17,
    name: "Forest Height",
    alt: "Global forest height"
  })
}

config.MAPSTYLES.landsat = [];

for(var i = 1999; i < 2013; i++) {
  (function(year) {
    config.MAPSTYLES.landsat[i] = new google.maps.ImageMapType({
      getTileUrl: function(ll, z) {
        var X = Math.abs(ll.x % (1 << z));  // wrap
        return "//<%= ENV['GFW_API_HOST'] %>/gee/landsat_composites/" + z + "/" + X + "/" + ll.y + ".png?year="+year;
      },
      tileSize: new google.maps.Size(256, 256),
      isPng: true,
      maxZoom: 17,
      name: "Landsat "+i
    });
  })(i);
}

_.templateSettings = {
  interpolate: /\{\{(.+?)\}\}/g,
  evaluate: /\[(.+?)\]/g
};

config.GRAPHS = {
  total_loss: {
    title: "Countries with greatest tree cover loss <sup>(2001-2012)</sup>",
    subtitle: "Global tree cover loss per year with annualized tree cover gain"
  },
  percent_loss: {
    title: "Countries with greatest percent tree cover loss <sup>(2001-2012)</sup><br />relative to 2000 tree cover extent",
    subtitle: "Percent global tree cover loss per year with annualized percent tree cover gain"
  },
  total_extent: {
    title: "Countries with greatest tree cover extent <sup>(2001-2012)</sup>",
    subtitle: "Global tree cover extent per year with global tree cover loss"
  },
  ratio: {
    title: "Countries with highest ratio of tree cover loss<br />to gain <sup>(2001-2012)</sup>",
    subtitle: "Tree cover loss relative to tree cover gain by country <sup>(2001-2012)</sup>"
  },
  domains: {
    title: "Climate domains ranked in order of<br />greatest tree cover loss",
    subtitle: "Tree cover loss per year by climate domain"
  }
}

config.GRAPHCOLORS = {
  tropical: "#9BC000",
  subtropical: "#FFFF73",
  boreal: "#FFB973",
  temperate: "#73DCFF"
}

function draw(topology, c, iso, options) {
  // c is index for country but RUS
  if (iso === 'RUS') c = 1;

  var country = topojson.feature(topology, topology.objects[c]);

  var width = 300,
      height = 300,
      el = "#"+iso;

  if (!options.alerts) {
    width = 150;
    height = 150;
    el = el+" a";
  }

  var svg = d3.select(el).append("svg:svg")
    .attr("width", width)
    .attr("height", height);

  var projection = d3.geo.mercator().scale(1).translate([0, 0]);
  var path = d3.geo.path().projection(projection);

  var b = path.bounds((options && options.bounds) || country),
      s = 1 / Math.max((b[1][0] - b[0][0]) / width, (b[1][1] - b[0][1]) / height),
      t = [(width - s * (b[1][0] + b[0][0])) / 2, (height - s * (b[1][1] + b[0][1])) / 2];

  projection
    .scale(s)
    .translate(t);

  svg.append("svg:path")
    .data([country])
    .attr("d", path)
    .attr("class", (options && options.bounds) ? 'country_alt' : 'country_main');

  if (options && options.alerts) {
    var forest = [];

    for(var i = 1; i < Object.keys(topology.objects).length; i++) {
      if (topology.objects[i].type === "Point") {
        forest.push(topojson.feature(topology, topology.objects[i]).geometry);
      }
    }

    svg.append("svg:g")
      .selectAll("circle")
      .data(forest)
      .enter()
      .append("svg:circle")
      .attr("class", "alert")
      .attr('cx', function(d){
        var coordinates = projection([d.coordinates[0], d.coordinates[1]])
        return coordinates[0]
      })
      .attr('cy', function(d){
        var coordinates = projection([d.coordinates[0], d.coordinates[1]])
        return coordinates[1]
      })
      .attr('r', 2)
      .style("fill", "#AAC600");
  }

  return country;
}

function formatNumber(x, abs) {
  var parts = x.toString().split('.');

  parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');

  var number = parts.join('.');

  if (abs && number) number = number.replace('-', ''); // abs

  return number;
}

function numberForCircle(num, proc) {
  var num_ = !proc ? (num/1000000).toFixed(1) : num;

  return formatNumber(num_);
}

function resizeWindow(e) {
  if (showMap) {
    if (GFW.app && !$('body').hasClass('embed')) {
      GFW.app.open();

      Filter.calcFiltersPosition();
    }
  }
}

function executeAjax(url, data, callback, type) {
  var jqxhr = null;
  var key = null;
  var val = null;

  type = type ? type : "GET";

  $.ajax({
    url: url,
    type: type,
    data: data,
    success: function(response) {
      if (callback) {
        callback.success(response);
      }
    },
    error: function(status, error) {
      if (callback) {
        callback.error(status, error);
      }
    },
    contentType: 'application/json',
    dataType: 'json'
  });

  return jqxhr;
}

function positionScroll() {
  if($("header").hasClass("stuck")) {
    // stuck logo to top of viewport
    if($(window).scrollTop() < 49) {
      $(".header-logo").css({
        "position": "absolute",
        "top": "44px"
      });
    } else if($(window).scrollTop() >= 49 && $(window).scrollTop() <= 112) {
      $(".header-logo").css({
        "position": "fixed",
        "top": "0"
      });
    } else if($(window).scrollTop() > 112) {
      $(".header-logo").css({
        "position": "absolute",
        "top": "108px"
      });
    }
  }
}

function validateEmail(email) {
  var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

jQuery.fn.smartPlaceholder = function(opt){
  this.each(function(){
    var
    speed   = (opt && opt.speed)   || 150,
    timeOut = (opt && opt.timeOut) || 100,
    $span   = $(this).find("span.holder"),
    $input  = $(this).find(":input").not("input[type='hidden'], input[type='submit']");

    if ($input.val()) {
      $span.hide();
    }

    $input.keydown(function(e) {
      if (e.metaKey && e.keyCode == 88) { // command+x
        setTimeout(function() {
          isEmpty($input.val()) && $span.fadeIn(speed);
        }, timeOut);
      } else if (e.metaKey && e.keyCode == 86) { // command+v
        setTimeout(function() {
          !isEmpty($input.val()) && $span.fadeOut(speed);
        }, timeOut);
      } else {
        setTimeout(function() { ($input.val()) ?  $span.fadeOut(speed) : $span.fadeIn(speed); }, 0);
      }
    });

    $span.click(function() { $input.focus(); });
    $input.blur(function() { !$input.val() && $span.fadeIn(speed); });
  });
}

function prettifyFilename(filename) {
  return filename.toLowerCase().replace(/ /g,"_");
}

function isLandsat(basemap) {
  var landsat = false;

  if ((basemap.indexOf("landsat") !== -1) && config.MAPSTYLES.landsat[basemap.replace('landsat', '')]) {
    landsat = config.MAPSTYLES.landsat[basemap.replace('landsat', '')]
  }

  return landsat;
}

function updateHash(options) {
  var zoom = map.getZoom(),
      lat = map.getCenter().lat().toFixed(2),
      lng = map.getCenter().lng().toFixed(2),
      baselayer = config.BASELAYER === null ? 'none' : config.BASELAYER,
      layers = (config.MAPOPTIONS.layers.length > 0) ? '/'+config.MAPOPTIONS.layers : '',
      analysis = (config.BASELAYER === null || config.ISO !== 'ALL') ? '' : config.MAPOPTIONS.analysis,
      embed = $('body').hasClass('embed') ? 'embed/' : '';

  var hash = embed+'map/'+zoom+'/'+lat+'/'+lng+'/'+config.ISO+'/'+config.BASEMAP+'/'+baselayer+layers+analysis;

  if (options && options.replace) {
    window.router.navigate(hash, { replace: true });
  } else {
    window.router.navigate(hash, { trigger: true });
  }
}
