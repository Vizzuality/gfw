---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?key=AIzaSyCMGfdDaSfjqv5zYoS0mTJnOT3e9MURWkU&cx=006990932653323112931%3Aqxwxtwbu7vg&q=Bia%C5%82owie%C5%BCa&start=1&filter=0
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Typhoeus - https://github.com/typhoeus/typhoeus
      Accept:
      - application/json
      Expect:
      - ''
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Wed, 05 Jul 2017 12:07:29 GMT
      Date:
      - Wed, 05 Jul 2017 12:07:29 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      ETag:
      - '"5Zlg0hddrJE62d4cVfAnWQWbWFk/u92iXkD7A4W29W1xsbLV5ncoeUU"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-XSS-Protection:
      - 1; mode=block
      Content-Length:
      - '21402'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="39,38,37,36,35"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: '1.1'
    adapter_metadata:
      effective_url: https://www.googleapis.com/customsearch/v1?key=AIzaSyCMGfdDaSfjqv5zYoS0mTJnOT3e9MURWkU&cx=006990932653323112931%3Aqxwxtwbu7vg&q=Bia%C5%82owie%C5%BCa&start=1&filter=0
  recorded_at: Wed, 05 Jul 2017 12:07:30 GMT
recorded_with: VCR 3.0.3
